{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justi\\\\VSC folder\\\\Web 3\\\\A1\\\\WebIII_assign1\\\\play-app\\\\src\\\\Components\\\\PlayDetails.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Header from \"./Header\";\nimport Favourites from \"./Favourites\";\nimport PlayTitle from \"./PlayTitle\";\nimport Tabs from \"./Tabs\";\nimport { useState, useEffect } from \"react\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlayDetails = props => {\n  _s();\n\n  const [play, setPlay] = useLocalStorage(\"plays\", []);\n  const [plays, updatePlays] = useState([]);\n  const [isFetching, stopFetching] = useState(true);\n  const APIfound = true;\n  useEffect(() => {\n    const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/play.php?name=\" + {\n      id\n    }; //url to fetch data with props id\n\n    if (play.length === 0) {\n      //only fetches if local storage doesn't exist\n      fetch(url).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          //if there was no url found load the component without the character/text tabs\n          APIfound = false;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"default\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Favourites, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(PlayTitle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Details, {\n              found: APIfound\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 29\n          }, this);\n        }\n      }).then(data => {\n        //places fetched data in state & local storage\n        setPlay(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        updatePlays(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        stopFetching(false);\n      }).catch(error => console.error(error));\n    } else {\n      updatePlays(play);\n      stopFetching(false); //if we were able to fetch successfully we return the full playdetails\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"default\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PlayTitle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            label: \"Details\",\n            children: props.details\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            label: \"Characters\",\n            children: props.characters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            label: \"Text\",\n            children: props.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    }\n  }, [play, setPlay]);\n};\n\n_s(PlayDetails, \"9hYshoM2zi7srx9f6SI4WI1QnhQ=\", true);\n\n_c = PlayDetails;\nexport default PlayDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayDetails\");","map":{"version":3,"sources":["C:/Users/Justi/VSC folder/Web 3/A1/WebIII_assign1/play-app/src/Components/PlayDetails.js"],"names":["React","Header","Favourites","PlayTitle","Tabs","useState","useEffect","cloneDeep","PlayDetails","props","play","setPlay","useLocalStorage","plays","updatePlays","isFetching","stopFetching","APIfound","url","id","length","fetch","then","response","ok","json","data","sort","a","b","title","catch","error","console","details","characters","text"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Header from \"./Header\";\r\nimport Favourites from \"./Favourites\";\r\nimport PlayTitle from \"./PlayTitle\";\r\nimport Tabs from \"./Tabs\";\r\nimport {useState, useEffect} from \"react\";\r\nimport * as cloneDeep from \"lodash/cloneDeep\";\r\n\r\nconst PlayDetails = (props) => {\r\n\r\n    const [play, setPlay] = useLocalStorage(\"plays\", []);  \r\n    const [plays, updatePlays] = useState([]);\r\n    const [isFetching, stopFetching] = useState(true);\r\n    const APIfound = true;\r\n    \r\n    useEffect(()=> {\r\n        const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/play.php?name=\" + {id}; //url to fetch data with props id\r\n        if (play.length === 0) { //only fetches if local storage doesn't exist\r\n            fetch(url)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();            \r\n\r\n                    } else {\r\n                        //if there was no url found load the component without the character/text tabs\r\n                        APIfound = false;\r\n                        return(\r\n                            <div className=\"default\">\r\n                                    <Header/>\r\n                                    <Favourites />\r\n                                    <PlayTitle />                                   \r\n                                    {<Details found = {APIfound}/>}\r\n                            </div>\r\n                            );\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    \r\n                    //places fetched data in state & local storage\r\n                    setPlay(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    updatePlays(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    stopFetching(false);\r\n                })\r\n                .catch(error => console.error(error));\r\n        } else {\r\n\r\n            updatePlays(play);\r\n            stopFetching(false);\r\n\r\n            \r\n           \r\n            //if we were able to fetch successfully we return the full playdetails\r\n            return(\r\n                <div className=\"default\">\r\n                        <Header/>\r\n                        <PlayTitle /> \r\n                        <Tabs>\r\n                            <div label=\"Details\">\r\n                                {props.details}\r\n                            </div>\r\n                            <div label=\"Characters\">\r\n                                {props.characters}\r\n                            </div>\r\n                            <div label=\"Text\">\r\n                                {props.text}\r\n                            </div>\r\n                        </Tabs>\r\n                </div>\r\n                )\r\n        }\r\n    }, [play, setPlay])\r\n}\r\n\r\n\r\nexport default PlayDetails;"]},"metadata":{},"sourceType":"module"}