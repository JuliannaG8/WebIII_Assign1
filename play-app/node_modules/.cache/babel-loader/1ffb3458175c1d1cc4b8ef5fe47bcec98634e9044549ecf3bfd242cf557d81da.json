{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justi\\\\VSC folder\\\\Web 3\\\\A1\\\\WebIII_assign1\\\\play-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { useState, useEffect } from \"react\";\nimport DefaultView from \"./Components/DefaultView\";\nimport { useLocalStorage } from \"./Hooks/useLocalStorage\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\nimport Loader from \"react-loader-spinner\";\nimport HomeView from \"./Components/HomeView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //local storage logic inspired by https://blog.logrocket.com/using-localstorage-react-hooks/\n  const [fullPlaysList, setFullPlaysList] = useLocalStorage(\"plays\", []); //fullPlaysList contains the entire list unedited of plays as fetched from the api/local storage, while plays will be\n  //altered by filter/sort/restorePlays functions and passed to other components as props\n\n  const [plays, updatePlays] = useState([]);\n  const [isFetching, stopFetching] = useState(true);\n  useEffect(() => {\n    const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\"; //url to fetch data\n\n    if (fullPlaysList.length === 0) {\n      //only fetches if local storage doesn't exist\n      fetch(url).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Fetch failed\");\n        }\n      }).then(data => {\n        //places fetched data in state & local storage\n        setFullPlaysList(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        updatePlays(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        stopFetching(false);\n      }).catch(error => console.error(error));\n    } else {\n      updatePlays(fullPlaysList);\n      stopFetching(false);\n    }\n  }, [fullPlaysList, setFullPlaysList]);\n\n  const sort = e => {\n    //cloning plays list\n    const sortedPlays = cloneDeep(plays);\n    let sortBy; //if sorting by year, sets sortBy variable to likelyDate\n    //otherwise, sortBy variable is set to title\n\n    if (e.target.textContent.toLowerCase() === \"year\") sortBy = \"likelyDate\";else sortBy = e.target.textContent.toLowerCase();\n    sortedPlays.sort((a, b) => a[sortBy] > b[sortBy] ? 1 : -1);\n    updatePlays(sortedPlays);\n  }; //uses fullPlaysList state variable to reset plays\n\n\n  const restorePlays = () => {\n    updatePlays(fullPlaysList);\n  };\n\n  const filter = filters => {\n    //function to filter list by dates\n    const filterPlaysByDate = (before, after, filteredPlays) => {\n      //only returns plays whose years are between before and after years when both are specified,\n      //or only matches the parameters of one when the other is missing\n      return filteredPlays.filter(p => before > p.likelyDate && p.likelyDate > after || typeof after === \"undefined\" && p.likelyDate < before || typeof before === \"undefined\" && p.likelyDate > after);\n    }; //function to filter by title and/or genre\n\n\n    const filterPlaysByTitleGenre = (titleString, genre, filteredPlays) => {\n      //only returns plays that match both title and genre when both are specified,\n      //or only matches the parameters of one when the other is missing\n      return filteredPlays.filter(p => p.title.toLowerCase().includes(titleString) && p.genre === genre || typeof genre === \"undefined\" && p.title.toLowerCase().includes(titleString) || typeof titleString === \"undefined\" && p.genre === genre);\n    }; //initial value of filteredPlays set to fullPlaysList in case user does multiple filter requests in a row without\n    //clearing initial filters\n\n\n    let filteredPlays = cloneDeep(fullPlaysList); //only filters by title or genre if at least one is specified\n\n    if (typeof filters.title != \"undefined\" || typeof filters.genre != \"undefined\") {\n      const filterTitleGenre = cloneDeep(filteredPlays);\n      filteredPlays = filterPlaysByTitleGenre(filters.title.toLowerCase(), filters.genre, filterTitleGenre);\n    } //only filters by dates if either before or after year is specified\n\n\n    if (typeof filters.before != \"undefined\" || typeof filters.after != \"undefined\") {\n      const filterByDate = cloneDeep(filteredPlays);\n      filteredPlays = filterPlaysByDate(filters.before, filters.after, filterByDate);\n    } //sets the list of filtered plays to state\n\n\n    updatePlays(filteredPlays);\n  }; //while fetching data, displays loading symbol\n\n\n  if (isFetching && plays.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"Circles\",\n      color: \"#00BFFF\",\n      height: \"50vh\",\n      width: \"50vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(DefaultView, {\n        plays: plays,\n        restore: restorePlays,\n        filter: filter,\n        sort: sort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/default\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(DefaultView, {\n          plays: plays,\n          restore: restorePlays,\n          filter: filter,\n          sort: sort\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(App, \"suRLURRAoVYk1fvTBc+gCC2nr48=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Justi/VSC folder/Web 3/A1/WebIII_assign1/play-app/src/App.js"],"names":["Route","Switch","useState","useEffect","DefaultView","useLocalStorage","cloneDeep","Loader","HomeView","App","fullPlaysList","setFullPlaysList","plays","updatePlays","isFetching","stopFetching","url","length","fetch","then","response","ok","json","Error","data","sort","a","b","title","catch","error","console","e","sortedPlays","sortBy","target","textContent","toLowerCase","restorePlays","filter","filters","filterPlaysByDate","before","after","filteredPlays","p","likelyDate","filterPlaysByTitleGenre","titleString","genre","includes","filterTitleGenre","filterByDate"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {useState, useEffect} from \"react\";\r\nimport DefaultView from \"./Components/DefaultView\";\r\nimport {useLocalStorage} from \"./Hooks/useLocalStorage\";\r\nimport * as cloneDeep from \"lodash/cloneDeep\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport HomeView from \"./Components/HomeView\";\r\n\r\nfunction App() {\r\n\r\n    //local storage logic inspired by https://blog.logrocket.com/using-localstorage-react-hooks/\r\n    const [fullPlaysList, setFullPlaysList] = useLocalStorage(\"plays\", []);\r\n    //fullPlaysList contains the entire list unedited of plays as fetched from the api/local storage, while plays will be\r\n    //altered by filter/sort/restorePlays functions and passed to other components as props\r\n    const [plays, updatePlays] = useState([]);\r\n    const [isFetching, stopFetching] = useState(true);\r\n\r\n    useEffect(()=> {\r\n        const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\"; //url to fetch data\r\n        if (fullPlaysList.length === 0) { //only fetches if local storage doesn't exist\r\n            fetch(url)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    } else {\r\n                        throw new Error(\"Fetch failed\");\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    //places fetched data in state & local storage\r\n                    setFullPlaysList(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    updatePlays(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    stopFetching(false);\r\n                })\r\n                .catch(error => console.error(error));\r\n        } else {\r\n            updatePlays(fullPlaysList);\r\n            stopFetching(false);\r\n        }\r\n    }, [fullPlaysList, setFullPlaysList])\r\n\r\n    const sort = (e)=>{\r\n        //cloning plays list\r\n        const sortedPlays = cloneDeep(plays);\r\n        let sortBy;\r\n        //if sorting by year, sets sortBy variable to likelyDate\r\n        //otherwise, sortBy variable is set to title\r\n        if(e.target.textContent.toLowerCase() === \"year\")\r\n            sortBy=\"likelyDate\";\r\n        else\r\n            sortBy=e.target.textContent.toLowerCase();\r\n        sortedPlays.sort((a, b) => a[sortBy]>b[sortBy] ? 1 : -1);\r\n        updatePlays(sortedPlays);\r\n    }\r\n\r\n    //uses fullPlaysList state variable to reset plays\r\n    const restorePlays = ()=>{\r\n        updatePlays(fullPlaysList);\r\n    }\r\n\r\n    const filter = filters =>{\r\n        //function to filter list by dates\r\n        const filterPlaysByDate = (before, after, filteredPlays) => {\r\n            //only returns plays whose years are between before and after years when both are specified,\r\n            //or only matches the parameters of one when the other is missing\r\n            return filteredPlays.filter((p)=> (before > p.likelyDate && p.likelyDate > after) ||\r\n                (typeof after === \"undefined\" && p.likelyDate < before) ||\r\n                (typeof before === \"undefined\" && p.likelyDate > after));\r\n        }\r\n        //function to filter by title and/or genre\r\n        const filterPlaysByTitleGenre = (titleString, genre, filteredPlays) =>{\r\n            //only returns plays that match both title and genre when both are specified,\r\n            //or only matches the parameters of one when the other is missing\r\n            return filteredPlays.filter(p=> (p.title.toLowerCase().includes(titleString) && p.genre === genre) ||\r\n                (typeof genre === \"undefined\" && p.title.toLowerCase().includes(titleString)) ||\r\n                (typeof titleString === \"undefined\" && p.genre === genre));\r\n        }\r\n        //initial value of filteredPlays set to fullPlaysList in case user does multiple filter requests in a row without\r\n        //clearing initial filters\r\n        let filteredPlays = cloneDeep(fullPlaysList);\r\n        //only filters by title or genre if at least one is specified\r\n        if (typeof filters.title != \"undefined\" || typeof filters.genre != \"undefined\"){\r\n            const filterTitleGenre = cloneDeep(filteredPlays);\r\n            filteredPlays = filterPlaysByTitleGenre(filters.title.toLowerCase(), filters.genre, filterTitleGenre);\r\n        }\r\n\r\n        //only filters by dates if either before or after year is specified\r\n        if (typeof filters.before != \"undefined\" || typeof filters.after != \"undefined\"){\r\n            const filterByDate = cloneDeep(filteredPlays);\r\n            filteredPlays = filterPlaysByDate(filters.before, filters.after, filterByDate);\r\n        }\r\n\r\n        //sets the list of filtered plays to state\r\n        updatePlays(filteredPlays);\r\n    }\r\n    //while fetching data, displays loading symbol\r\n    if (isFetching && plays.length === 0){\r\n        return <Loader type=\"Circles\" color=\"#00BFFF\" height=\"50vh\" width=\"50vh\"/>\r\n    } else{\r\n        return (\r\n            <div className=\"App\">\r\n                <DefaultView plays={plays} restore={restorePlays} filter={filter} sort={sort}/>\r\n                {/*  commented out for now so nothing breaks while testing*/}\r\n                {/* <Route path=\"/HomeView\" exact> */}\r\n                    {/* <HomeView songs={fullPlaysList} /> */}\r\n                {/* </Route> */}\r\n                <Route path='/default' exact>\r\n                    <DefaultView plays={plays} restore={restorePlays} filter={filter} sort={sort} />\r\n                </Route>\r\n                {/*<Switch>*/}\r\n                {/*  <Route path='/:play' children={<PlayDetails/>}/>*/}\r\n                {/*</Switch>*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}