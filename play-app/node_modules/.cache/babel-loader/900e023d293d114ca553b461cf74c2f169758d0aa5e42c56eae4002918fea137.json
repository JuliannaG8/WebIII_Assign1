{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justi\\\\Desktop\\\\Web3Assignment1\\\\webiii_assign1\\\\play-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { useState, useEffect } from \"react\";\nimport DefaultView from \"./Components/DefaultView\";\nimport { useLocalStorage } from \"./Hooks/useLocalStorage\";\nimport * as cloneDeep from \"lodash/cloneDeep\";\nimport Loader from \"react-loader-spinner\";\nimport HomeView from \"./Components/HomeView\";\nimport PlayDetails from \"./Components/PlayDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //local storage logic inspired by https://blog.logrocket.com/using-localstorage-react-hooks/\n  const [fullPlaysList, setFullPlaysList] = useLocalStorage(\"plays\", []); //fullPlaysList contains the entire list unedited of plays as fetched from the api/local storage, while plays will be\n  //altered by filter/sort/restorePlays functions and passed to other components as props\n\n  const [plays, updatePlays] = useState([]);\n  const [isFetching, stopFetching] = useState(true);\n  const [favourites, editFavourites] = useLocalStorage(\"fav\", []);\n  useEffect(() => {\n    const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\"; //url to fetch data\n\n    if (fullPlaysList.length === 0) {\n      //only fetches if local storage doesn't exist\n      fetch(url).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Fetch failed\");\n        }\n      }).then(data => {\n        //places fetched data in state & local storage\n        setFullPlaysList(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        updatePlays(data.sort((a, b) => a.title > b.title ? 1 : -1));\n        stopFetching(false);\n      }).catch(error => console.error(error));\n    } else {\n      updatePlays(fullPlaysList);\n      stopFetching(false);\n    }\n  }, [fullPlaysList, setFullPlaysList]);\n\n  const sort = e => {\n    //cloning plays list\n    const sortedPlays = cloneDeep(plays);\n    let sortBy; //if sorting by year, sets sortBy variable to likelyDate\n    //otherwise, sortBy variable is set to title\n\n    if (e.target.textContent.toLowerCase() === \"year\") sortBy = \"likelyDate\";else sortBy = e.target.textContent.toLowerCase();\n    sortedPlays.sort((a, b) => a[sortBy] > b[sortBy] ? 1 : -1);\n    updatePlays(sortedPlays);\n  }; //uses fullPlaysList state variable to reset plays\n\n\n  const restorePlays = () => {\n    updatePlays(fullPlaysList);\n  };\n\n  const removeFavourite = id => {\n    const favouritesCopy = cloneDeep(favourites);\n    const favToDelete = favouritesCopy.findIndex(f => f.id === id);\n    favouritesCopy.splice(favToDelete, 1);\n    editFavourites(favouritesCopy);\n  };\n\n  const addFavourite = play => {\n    const exists = favourites.find(f => f.id === play.id);\n\n    if (typeof exists === 'undefined') {\n      const favouritesCopy = cloneDeep(favourites);\n      favouritesCopy.push(play);\n      editFavourites(favouritesCopy);\n    } else alert(\"Play already in Favourites list\");\n  };\n\n  const filter = filters => {\n    //function to filter list by dates\n    const filterPlaysByDate = (before, after, filteredPlays) => {\n      //only returns plays whose years are between before and after years when both are specified,\n      //or only matches the parameters of one when the other is missing\n      return filteredPlays.filter(p => before > p.likelyDate && p.likelyDate > after || typeof after === \"undefined\" && p.likelyDate < before || typeof before === \"undefined\" && p.likelyDate > after);\n    }; //function to filter by title and/or genre\n\n\n    const filterPlaysByTitleGenre = (titleString, genre, filteredPlays) => {\n      //only returns plays that match both title and genre when both are specified,\n      //or only matches the parameters of one when the other is missing\n      return filteredPlays.filter(p => p.title.toLowerCase().includes(titleString) && p.genre === genre || typeof genre === \"undefined\" && p.title.toLowerCase().includes(titleString) || typeof titleString === \"undefined\" && p.genre === genre);\n    }; //initial value of filteredPlays set to fullPlaysList in case user does multiple filter requests in a row without\n    //clearing initial filters\n\n\n    let filteredPlays = cloneDeep(fullPlaysList); //only filters by title or genre if at least one is specified\n\n    if (typeof filters.title != \"undefined\" || typeof filters.genre != \"undefined\") {\n      const filterTitleGenre = cloneDeep(filteredPlays);\n      filteredPlays = filterPlaysByTitleGenre(filters.title.toLowerCase(), filters.genre, filterTitleGenre);\n    } //only filters by dates if either before or after year is specified\n\n\n    if (typeof filters.before != \"undefined\" || typeof filters.after != \"undefined\") {\n      const filterByDate = cloneDeep(filteredPlays);\n      filteredPlays = filterPlaysByDate(filters.before, filters.after, filterByDate);\n    } //sets the list of filtered plays to state\n\n\n    updatePlays(filteredPlays);\n  }; //while fetching data, displays loading symbol\n\n\n  if (isFetching && plays.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"Circles\",\n      color: \"#00BFFF\",\n      height: \"50vh\",\n      width: \"50vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(HomeView, {\n          songs: fullPlaysList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/HomeView\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(HomeView, {\n          songs: fullPlaysList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/default\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(DefaultView, {\n          plays: plays,\n          restore: restorePlays,\n          filter: filter,\n          sort: sort,\n          favs: favourites,\n          addFav: addFavourite,\n          removeFav: removeFavourite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:play/details\",\n          children: /*#__PURE__*/_jsxDEV(PlayDetails, {\n            addFav: addFavourite\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(App, \"ekHM+yhOtIUMnONxPE3A8nvRYQU=\", false, function () {\n  return [useLocalStorage, useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Justi/Desktop/Web3Assignment1/webiii_assign1/play-app/src/App.js"],"names":["Route","Switch","useState","useEffect","DefaultView","useLocalStorage","cloneDeep","Loader","HomeView","PlayDetails","App","fullPlaysList","setFullPlaysList","plays","updatePlays","isFetching","stopFetching","favourites","editFavourites","url","length","fetch","then","response","ok","json","Error","data","sort","a","b","title","catch","error","console","e","sortedPlays","sortBy","target","textContent","toLowerCase","restorePlays","removeFavourite","id","favouritesCopy","favToDelete","findIndex","f","splice","addFavourite","play","exists","find","push","alert","filter","filters","filterPlaysByDate","before","after","filteredPlays","p","likelyDate","filterPlaysByTitleGenre","titleString","genre","includes","filterTitleGenre","filterByDate"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {useState, useEffect} from \"react\";\r\nimport DefaultView from \"./Components/DefaultView\";\r\nimport {useLocalStorage} from \"./Hooks/useLocalStorage\";\r\nimport * as cloneDeep from \"lodash/cloneDeep\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport HomeView from \"./Components/HomeView\";\r\nimport PlayDetails from \"./Components/PlayDetails\";\r\n\r\n\r\nfunction App() {\r\n\r\n    //local storage logic inspired by https://blog.logrocket.com/using-localstorage-react-hooks/\r\n    const [fullPlaysList, setFullPlaysList] = useLocalStorage(\"plays\", []);\r\n    //fullPlaysList contains the entire list unedited of plays as fetched from the api/local storage, while plays will be\r\n    //altered by filter/sort/restorePlays functions and passed to other components as props\r\n    const [plays, updatePlays] = useState([]);\r\n    const [isFetching, stopFetching] = useState(true);\r\n    const [favourites, editFavourites] = useLocalStorage(\"fav\",[]);\r\n\r\n    useEffect(()=> {\r\n        const url = \"https://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\"; //url to fetch data\r\n        if (fullPlaysList.length === 0) { //only fetches if local storage doesn't exist\r\n            fetch(url)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    } else {\r\n                        throw new Error(\"Fetch failed\");\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    //places fetched data in state & local storage\r\n                    setFullPlaysList(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    updatePlays(data.sort((a, b) => a.title>b.title ? 1 : -1));\r\n                    stopFetching(false);\r\n                })\r\n                .catch(error => console.error(error));\r\n        } else {\r\n            updatePlays(fullPlaysList);\r\n            stopFetching(false);\r\n        }\r\n    }, [fullPlaysList, setFullPlaysList])\r\n\r\n    const sort = (e)=> {\r\n        //cloning plays list\r\n        const sortedPlays = cloneDeep(plays);\r\n        let sortBy;\r\n        //if sorting by year, sets sortBy variable to likelyDate\r\n        //otherwise, sortBy variable is set to title\r\n        if(e.target.textContent.toLowerCase() === \"year\")\r\n            sortBy=\"likelyDate\";\r\n        else\r\n            sortBy=e.target.textContent.toLowerCase();\r\n        sortedPlays.sort((a, b) => a[sortBy]>b[sortBy] ? 1 : -1);\r\n        updatePlays(sortedPlays);\r\n    }\r\n\r\n    //uses fullPlaysList state variable to reset plays\r\n    const restorePlays = ()=>{\r\n        updatePlays(fullPlaysList);\r\n    }\r\n    const removeFavourite=(id)=>{\r\n        const favouritesCopy = cloneDeep(favourites);\r\n        const favToDelete=favouritesCopy.findIndex(f=>f.id === id);\r\n        favouritesCopy.splice(favToDelete, 1);\r\n        editFavourites(favouritesCopy);\r\n    }\r\n    const addFavourite=(play)=>{\r\n        const exists = favourites.find(f=>f.id === play.id);\r\n        if (typeof exists === 'undefined')\r\n        {\r\n            const favouritesCopy = cloneDeep(favourites);\r\n            favouritesCopy.push(play);\r\n            editFavourites(favouritesCopy);\r\n        } else\r\n            alert(\"Play already in Favourites list\");\r\n    }\r\n    const filter = filters =>{\r\n        //function to filter list by dates\r\n        const filterPlaysByDate = (before, after, filteredPlays) => {\r\n            //only returns plays whose years are between before and after years when both are specified,\r\n            //or only matches the parameters of one when the other is missing\r\n            return filteredPlays.filter((p)=> (before > p.likelyDate && p.likelyDate > after) ||\r\n                (typeof after === \"undefined\" && p.likelyDate < before) ||\r\n                (typeof before === \"undefined\" && p.likelyDate > after));\r\n        }\r\n        //function to filter by title and/or genre\r\n        const filterPlaysByTitleGenre = (titleString, genre, filteredPlays) =>{\r\n            //only returns plays that match both title and genre when both are specified,\r\n            //or only matches the parameters of one when the other is missing\r\n            return filteredPlays.filter(p=> (p.title.toLowerCase().includes(titleString) && p.genre === genre) ||\r\n                (typeof genre === \"undefined\" && p.title.toLowerCase().includes(titleString)) ||\r\n                (typeof titleString === \"undefined\" && p.genre === genre));\r\n        }\r\n        //initial value of filteredPlays set to fullPlaysList in case user does multiple filter requests in a row without\r\n        //clearing initial filters\r\n        let filteredPlays = cloneDeep(fullPlaysList);\r\n        //only filters by title or genre if at least one is specified\r\n        if (typeof filters.title != \"undefined\" || typeof filters.genre != \"undefined\"){\r\n            const filterTitleGenre = cloneDeep(filteredPlays);\r\n            filteredPlays = filterPlaysByTitleGenre(filters.title.toLowerCase(), filters.genre, filterTitleGenre);\r\n        }\r\n\r\n        //only filters by dates if either before or after year is specified\r\n        if (typeof filters.before != \"undefined\" || typeof filters.after != \"undefined\"){\r\n            const filterByDate = cloneDeep(filteredPlays);\r\n            filteredPlays = filterPlaysByDate(filters.before, filters.after, filterByDate);\r\n        }\r\n\r\n        //sets the list of filtered plays to state\r\n        updatePlays(filteredPlays);\r\n    }\r\n    //while fetching data, displays loading symbol\r\n    if (isFetching && plays.length === 0){\r\n        return <Loader type=\"Circles\" color=\"#00BFFF\" height=\"50vh\" width=\"50vh\"/>\r\n    } else{\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <Route path=\"/\" exact>\r\n                    <HomeView songs={fullPlaysList} />\r\n                </Route>\r\n                <Route path=\"/HomeView\" exact>\r\n                     <HomeView songs={fullPlaysList} />\r\n                 </Route>\r\n                <Route path='/default' exact>\r\n                    <DefaultView plays={plays} restore={restorePlays} filter={filter} sort={sort} favs={favourites} addFav={addFavourite} removeFav={removeFavourite} />\r\n                </Route>\r\n                <Switch>\r\n                    <Route path='/:play/details'>\r\n                        <PlayDetails addFav={addFavourite}/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}